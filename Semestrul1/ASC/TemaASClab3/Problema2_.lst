     1                                  ;Adunari si scaderi - problema 24 - cu semn
     2                                  ;(a + b + c) - d + (b - c)
     3                                  ;a - byte, b - word, c - double word, d - qword
     4                                  ;(-9 + 8 + (-3)) - 6 + (8 - (-3)) = -4 - 6 + 11 = -10 + 11 = 1 = 00 00 00 01h
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 F7                              a db -9
    18 00000001 0800                            b dw 8
    19 00000003 FDFFFFFF                        c dd -3
    20 00000007 0600000000000000                d dq 6
    21 0000000F <res 00000008>                  r resq 1 ; Rezerv un quadword in memorie pentru rezultat
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 A0[00000000]                    mov AL, [a] ; AL = a = -9
    26 00000005 668B1D[01000000]                mov BX, [b] ; BX = b =  8
    27 0000000C 8B0D[03000000]                  mov ECX,[c] ; ECX = c = -3
    28 00000012 6698                            cbw ; AL - > AX = a = -9 
    29 00000014 6601D8                          add AX, BX  ; AX = AX + BX = a + b = -9 + 8 = -1
    30 00000017 98                              cwde ; AX - > EAX = -1
    31 00000018 01C8                            add EAX, ECX ; EAX = EAX + ECX = -1 +(-3) = a + b + c = -4
    32 0000001A 99                              cdq 
    33                                          ; EDX : EAX  = 00 00 00 03h
    34                                          
    35 0000001B 8B1D[07000000]                  mov EBX, dword[d+0]
    36 00000021 8B0D[0B000000]                  mov ECX, dword[d+4]
    37                                          ; ECX : EBX = d
    38                                          
    39                                          ; EDX : EAX -
    40                                          ; ECX : EBX
    41                                          ; (a + b + c) - d
    42 00000027 F8                              clc ; clear carry flag
    43 00000028 29D8                            sub EAX, EBX ;EAX = EAX - EBX = 00 03h - 00 06h = 00 0Ah 
    44 0000002A 19CA                            sbb EDX, ECX ;EDX = EDX - ECX - CF
    45                                                  
    46 0000002C 89D1                            mov ECX, EDX
    47 0000002E 89C3                            mov EBX, EAX 
    48                                          ;EDX : EAX -> ECX : EBX = (a + b + c) - d = -10
    49                                          
    50 00000030 66A1[01000000]                  mov AX, [b] ; AX = b = 8
    51 00000036 98                              cwde        ; AX -> EAX = b = 8
    52 00000037 2B05[03000000]                  sub EAX, dword[c]; EAX = EAX - c = b - c = 8 - (-3)= 11
    53 0000003D 99                              cdq
    54                                          ;EAX - > EDX : EAX = b - c = 11
    55 0000003E F8                              clc ; CF = 0
    56 0000003F 01C3                            add EBX, EAX ;EBX = EBX + EAX 
    57 00000041 11D1                            adc ECX, EDX ;ECX = ECX + EDX + CF 
    58                                          ;ECX : EBX = (a + b + c) - d + (b - c) = -10 + 11 = 1 
    59                                          
    60 00000043 891D[0F000000]                  mov dword[r+0],EBX  
    61 00000049 890D[13000000]                  mov dword[r+4],ECX
    62                                          
    63                                          ; exit(0)
    64 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
