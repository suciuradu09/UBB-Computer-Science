     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fread, fprintf, printf, fclose           ; tell nasm that exit exists even if we won't be defining it
     8                                  extern transformare
     9                                  extern invers_transformare
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  import printf msvcrt.dll
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 6E756D6572652E7478-         nume_fis db "numere.txt", 0   ; numele fisierului care va fi deschis
    18 00000009 7400               
    19 0000000B 7200                        mod_acces db "r", 0          ; modul de deschidere a fisierului - 
    20                                                                   ; r - pentru scriere. fisierul trebuie sa existe 
    21 0000000D FFFFFFFF                    descriptor_fis dd -1         ; variabila in care vom salva descriptorul fisierului - necesar pentru a putea face referire la fisier
    22                                      len equ 10                     ; numarul maxim de elemente citite din fisier.                            
    23 00000011 00000000<rept>              text times len dd 0          ; sirul in care se va citi textul din fisier 
    24 00000039 257300                      ft db "%s", 0
    25 0000003C 00<rept>                    aux times 4 db 0
    26 00000040 00<rept>                    cifre_citite times 3 db 0
    27 00000043 00<rept>                    N times 10 db 0
    28 0000004D 00<rept>                    P times 10 db 0
    29 00000057 00                          i db 0
    30 00000058 00                          j db 0
    31                                  
    32                                      
    33                                  
    34                                  ; our code starts here
    35                                  segment code use32 class=code
    36                                      start:
    37                                          ; apelam fopen pentru a deschide fisierul
    38                                          ; functia va returna in EAX descriptorul fisierului sau 0 in caz de eroare
    39                                          ; eax = fopen(nume_fisier, mod_acces)
    40 00000000 68[0B000000]                    push dword mod_acces
    41 00000005 68[00000000]                    push dword nume_fis
    42 0000000A FF15[00000000]                  call [fopen]
    43 00000010 83C408                          add esp, 4*2                ;eliberam parametrii de pe stiva
    44                                          
    45 00000013 A3[0D000000]                    mov [descriptor_fis], eax   ; salvam valoarea returnata de fopen in variabila descriptor_fis
    46                                          
    47                                          ; verificam daca functia fopen a creat cu succes fisierul (daca EAX != 0)
    48 00000018 83F800                          cmp eax, 0                      
    49 0000001B 0F84AC000000                    je final                        ; daca citirea din fisier nu are succes
    50                                          
    51                                          ; citim textul in fisierul deschis folosind functia fread
    52                                          ; eax = fread(text, 1, len, descriptor_fis)
    53 00000021 FF35[0D000000]                  push dword [descriptor_fis]
    54 00000027 6A0A                            push dword len
    55 00000029 6A01                            push dword 1
    56 0000002B 68[11000000]                    push dword text        
    57 00000030 FF15[00000000]                  call [fread]
    58 00000036 83C410                          add esp, 4*4                 ; dupa apelul functiei fread EAX contine numarul de caractere citite din fisier
    59                                         
    60 00000039 BE[11000000]                    mov esi, text
    61 0000003E 89C1                            mov ecx, eax
    62 00000040 FC                              cld
    63 00000041 BB00000000                      mov ebx, 0
    64                                         
    65                                          repeta:
    66 00000046 AC                                  lodsb
    67 00000047 3C20                                cmp al, " "
    68 00000049 7553                                jne continua
    69 0000004B 51                                  push ecx
    70                                                  
    71 0000004C 53                                  push ebx
    72 0000004D 68[3C000000]                        push dword aux 
    73 00000052 E8(00000000)                        call transformare   ;edx=numar
    74                                              
    75 00000057 83C408                              add esp, 4*2
    76 0000005A 59                                  pop ecx
    77                                              
    78 0000005B F7C201000000                        test edx, 1b
    79 00000061 741B                                jz par
    80 00000063 52                                      push edx
    81 00000064 E8(00000000)                            call invers_transformare
    82 00000069 89C2                                    mov edx, eax
    83 0000006B A1[57000000]                            mov eax, [i]
    84 00000070 8990[43000000]                          mov [eax+N],edx
    85 00000076 40                                      inc eax
    86 00000077 A3[57000000]                            mov [i],eax
    87 0000007C EB19                                    jmp reset
    88                                              
    89                                              par:
    90 0000007E 52                                      push edx
    91 0000007F E8(00000000)                            call invers_transformare
    92 00000084 89C2                                    mov edx, eax
    93 00000086 A1[58000000]                            mov eax, [j]
    94 0000008B 8990[4D000000]                          mov [eax+P],edx
    95 00000091 40                                      inc eax
    96 00000092 A3[58000000]                            mov [j],eax
    97                                              
    98                                              reset:
    99 00000097 BB00000000                              mov ebx,0
   100 0000009C EB07                                    jmp peste
   101                                              continua:
   102 0000009E 8883[3C000000]                          mov [aux+ebx], al
   103 000000A4 43                                      inc ebx
   104                                              peste:
   105 000000A5 E29F                                loop repeta
   106                                      
   107 000000A7 68[4D000000]                push dword P
   108 000000AC 68[39000000]                push dword ft
   109 000000B1 FF15[00000000]              call [printf]
   110 000000B7 83C408                      add esp,4*2
   111                                      
   112 000000BA 68[43000000]                push dword N
   113 000000BF 68[39000000]                push dword ft
   114 000000C4 FF15[00000000]              call [printf]
   115 000000CA 83C408                      add esp,4*2
   116                                      
   117                                      
   118                                      
   119                                      final:
   120                                      
   121 000000CD FF35[0D000000]              push dword [descriptor_fis]
   122 000000D3 FF15[00000000]              call [fclose]
   123 000000D9 83C404                      add esp,4
   124                                      
   125                                          ; exit(0)
   126 000000DC 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   127 000000DE FF15[00000000]                  call    [exit]       ; call exit to terminate the program
