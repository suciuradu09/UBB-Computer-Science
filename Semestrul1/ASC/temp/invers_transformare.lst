     1                                  bits 32
     2                                  global start      
     3                                  global invers_transformare  
     4                                  
     5                                  extern exit,printf               
     6                                  import exit msvcrt.dll    
     7                                  import printf msvcrt.dll
     8                                  
     9                                  segment data use32 public data
    10 00000000 39300000                    numar dd 12345
    11 00000004 257300                      format db "%s", 0
    12 00000007 0A                          zece db 10
    13 00000008 00<rept>                    sir times 10 db 0
    14 00000012 05                          nr_cif db 5
    15                                      
    16                                  segment code use32 public code
    17                                      invers_transformare:
    18                                      ; esp-adresa de revenire
    19                                      ; esp+4-adresa numarului de transformat
    20                                      ; esp+8-adresa numarului transformat in sir
    21                                      
    22 00000000 8B4C240C                    mov ecx, dword[esp+12]; numarul de cif
    23 00000004 8B7C2408                    mov edi, dword[esp+8] ;sir
    24 00000008 8B442404                    mov eax, dword[esp+4]          ;eax=numarul
    25                                      
    26 0000000C FC                          cld
    27                                          
    28                                          repeta3:
    29 0000000D 50                                  push eax
    30 0000000E 6658                                pop ax
    31 00000010 665A                                pop dx
    32                                              ; eax = dx:ax
    33                                              
    34 00000012 F635[07000000]                      div byte [zece] ; al = ax / 10, ah = ax % 10
    35 00000018 BA00000000                          mov edx, 0
    36 0000001D 88C2                                mov dl,al       ; dl = al ; dl = catul impartirii
    37 0000001F 88E0                                mov al, ah      ; al = restul impartirii
    38 00000021 0430                                add al, "0"     ; al = al + 30
    39 00000023 88440FFF                            mov [edi + ecx - 1], al
    40 00000027 B800000000                          mov eax, 0      ; eax = 0
    41 0000002C 89D0                                mov eax, edx    ; eax = catul
    42 0000002E 49                                  dec ecx         ; numarul de cifre
    43 0000002F 83F800                              cmp eax, 0      ; daca nu mai avem cifre iesi
    44 00000032 7402                                je afara
    45                                              
    46 00000034 EBD7                            jmp repeta3
    47                                          
    48                                      afara:
    49 00000036 C3                          ret
    50                                  
    51                                       start:
    52 00000037 FF35[12000000]                   push dword [nr_cif]
    53 0000003D 68[08000000]                     push dword sir
    54 00000042 FF35[00000000]                   push dword [numar]
    55 00000048 E8B3FFFFFF                       call invers_transformare
    56 0000004D 83C404                           add esp, 4
    57                                              
    58 00000050 68[08000000]                     push dword sir
    59 00000055 68[04000000]                     push dword format
    60 0000005A FF15[00000000]                   call [printf]
    61 00000060 83C408                           add esp ,4*2
    62                                          
    63                                      
    64                                           ; exit(0)
    65 00000063 6A00                             push    dword 0      ; push the parameter for exit onto the stack
    66 00000065 FF15[00000000]                   call    [exit]       ; call exit to terminate the program
