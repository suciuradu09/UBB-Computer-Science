     1                                  ; Se citeste un sir de numere din fisierul "numere.txt". Sa se creeze alte 2 siruri N - cu numere impare, P - numere pare si sa se afiseze in consola.
     2                                  
     3                                  
     4                                  bits 32
     5                                  global start
     6                                  
     7                                  
     8                                  extern exit, printf, fscanf, fopen, fclose, system
     9                                  import exit msvcrt.dll
    10                                  import fscanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  import system msvcrt.dll
    15                                  
    16                                  %include "nr_cif.asm"
     1                              <1> bits 32
     2                              <1> 
     3                              <1> global nr_cif
     4                              <1> ;global start      
     5                              <1> 
     6                              <1> ;extern exit
     7                              <1> ;extern printf               
     8                              <1> ;import exit msvcrt.dll    
     9                              <1> ;import printf msvcrt.dll
    10                              <1> 
    11                              <1> ;segment data use32 public data
    12                              <1>     ;numar dd 254
    13                              <1>     ;format db "%d", 0
    14                              <1>  
    15                              <1> ;segment code use32 public code
    16                              <1>     nr_cif:
    17                              <1>         ;Calculeaza numarul de cifre a unui numar introdus ca parametru
    18 00000000 8B442404            <1>         mov eax, [esp + 4] ; numarul 
    19                              <1>         ;esp - adresa de revenire a functiei
    20 00000004 B30A                <1>         mov bl, 10
    21 00000006 B900000000          <1>         mov ecx, 0
    22                              <1>         
    23                              <1>     repeta4:
    24 0000000B 50                  <1>         push eax
    25 0000000C 6658                <1>         pop ax
    26 0000000E 665A                <1>         pop dx
    27                              <1>         
    28 00000010 F6F3                <1>         div bl ; ah = eax % 10 / al = eax / 10 
    29                              <1>         
    30 00000012 BA00000000          <1>         mov edx, 0
    31 00000017 88C2                <1>         mov dl, al
    32                              <1>         
    33 00000019 B800000000          <1>         mov eax, 0
    34 0000001E 89D0                <1>         mov eax, edx
    35 00000020 41                  <1>         inc ecx      ; contor de numere
    36 00000021 80FA00              <1>         cmp dl, 0
    37 00000024 7402                <1>         je atat
    38 00000026 EBE3                <1>      jmp repeta4
    39                              <1>         
    40                              <1>         atat:
    41 00000028 C3                  <1>      ret
    42                              <1>      
    43                              <1>       ;start:
    44                              <1>          
    45                              <1>          ;mov eax, 0
    46                              <1>          ;push dword [numar]
    47                              <1>          ;call nr_cif
    48                              <1>          ;add esp, 4 * 1
    49                              <1>             
    50                              <1>          ;push dword ecx
    51                              <1>          ;push dword format
    52                              <1>          ;call [printf]
    53                              <1>          ;add esp ,4 * 2
    54                              <1>         
    55                              <1>     
    56                              <1>          ; exit(0)
    57                              <1>          ;push    dword 0      ; push the parameter for exit onto the stack
    58                              <1>          ;call    [exit]       ; call exit to terminate the program
    59                              <1> 
    60                              <1>         
    17                                  %include "reversed_transformare.asm"
     1                              <1> bits 32
     2                              <1> ;global start      
     3                              <1> 
     4                              <1> ;extern exit
     5                              <1> ;extern printf               
     6                              <1> ;import exit msvcrt.dll    
     7                              <1> ;import printf msvcrt.dll
     8                              <1> 
     9                              <1> ;segment data use32 public data
    10                              <1>     ;numar dd 2559
    11                              <1>     ;format db "%s", 0
    12                              <1>     ;sir times 10 db 0
    13                              <1>     ;nr_cif db 4
    14                              <1>     
    15                              <1> ;segment code use32 public code
    16                              <1>     global reversed_transformare  
    17                              <1> 
    18                              <1>     reversed_transformare:
    19                              <1>     ; esp-adresa de revenire
    20                              <1>     ; esp+4-adresa numarului de transformat
    21                              <1>     ; esp+8-adresa numarului transformat in sir
    22 00000029 B30A                <1>     mov bl, 10
    23 0000002B 8B4C240C            <1>     mov ecx, dword[esp+12]; numarul de cif
    24 0000002F 8B7C2408            <1>     mov edi, dword[esp+8] ;sir
    25 00000033 8B442404            <1>     mov eax, dword[esp+4] ;eax=numarul
    26                              <1>     
    27 00000037 FC                  <1>     cld
    28                              <1>         
    29                              <1>         repeta3:
    30 00000038 F6F3                <1>             div bl ; al = ax / 10, ah = ax % 10
    31 0000003A BA00000000          <1>             mov edx, 0
    32 0000003F 88C2                <1>             mov dl,al       ; dl = al ; dl = catul impartirii
    33 00000041 88E0                <1>             mov al, ah      ; al = restul impartirii
    34 00000043 0430                <1>             add al, "0"     ; al = al + 30
    35 00000045 88440FFF            <1>             mov [edi + ecx - 1], al
    36 00000049 B800000000          <1>             mov eax, 0      ; eax = 0
    37 0000004E 89D0                <1>             mov eax, edx    ; eax = catul
    38 00000050 49                  <1>             dec ecx         ; numarul de cifre
    39 00000051 83F800              <1>             cmp eax, 0      ; daca nu mai avem cifre iesi
    40 00000054 7402                <1>             je afara
    41                              <1>             
    42 00000056 EBE0                <1>         jmp repeta3
    43                              <1>     afara:
    44                              <1>     ;rezultat in eax
    45 00000058 C3                  <1>     ret
    46                              <1> 
    47                              <1>      ;start:
    48                              <1>          ;push dword [nr_cif]
    49                              <1>          ;push dword sir
    50                              <1>          ;push dword [numar]
    51                              <1>          ;call reversed_transformare
    52                              <1>          ;add esp, 4 * 3
    53                              <1>             
    54                              <1>          ;push dword eax
    55                              <1>          ;push dword format
    56                              <1>          ;call [printf]
    57                              <1>          ;add esp ,4*2
    58                              <1>         
    59                              <1>     
    60                              <1>          ; exit(0)
    61                              <1>          ;push    dword 0      ; push the parameter for exit onto the stack
    62                              <1>          ;call    [exit]       ; call exit to terminate the program
    18                                  
    19                                  segment data use32 public data
    20 00000059 6E756D6572652E7478-         filename db "numere.txt", 0
    20 00000062 7400               
    21 00000064 00000000                    descriptor dd 0
    22 00000068 7200                        open_type db "r", 0
    23 0000006A 256400                      format_input db "%d", 0
    24 0000006D 536972756C20646520-         format_output_imp db "Sirul de numere impare: %s ", 0
    24 00000076 6E756D65726520696D-
    24 0000007F 706172653A20257320-
    24 00000088 00                 
    25 00000089 536972756C20646520-         format_output_pare db "Sirul de numere pare: %s", 0
    25 00000092 6E756D657265207061-
    25 0000009B 72653A20257300     
    26 000000A2 25732000                    format_output db "%s ", 0
    27 000000A6 00000000                    lungime dd 0 
    28 000000AA 00000000                    numar dd 0
    29                                      N times 20 resd 0 ; sirul cu numere impare
    30                                      P times 20 resd 0 ; sirul cu numere pare
    31 000000AE 00000000                    i dd 0
    32 000000B2 00000000                    j dd 0
    33 000000B6 0A00                        endline db 10, 0
    34 000000B8 00                          numar_cifre db 0
    35                                  segment code use32 public code
    36                                  start:
    37 00000000 68[68000000]                push dword open_type
    38 00000005 68[59000000]                push dword filename
    39 0000000A FF15[00000000]              call [fopen]
    40 00000010 83C408                      add esp, 4 * 2
    41 00000013 A3[64000000]                mov [descriptor], eax
    42 00000018 83F800                      cmp eax, 0
    43 0000001B 0F84B8000000                je final
    44                                      
    45                                      ; citire numere
    46                                       citeste:
    47                                  
    48 00000021 68[AA000000]                    push numar
    49 00000026 68[6A000000]                    push format_input
    50 0000002B FF35[64000000]                  push dword [descriptor]
    51 00000031 FF15[00000000]                  call [fscanf]
    52 00000037 83C40C                          add esp, 4*3
    53                                          
    54 0000003A 83F801                          cmp eax, 1
    55 0000003D 7561                            jne sari
    56 0000003F 50                              push eax
    57                                                  
    58 00000040 A1[AA000000]                    mov eax, [numar] ; numarul curent din sir
    59 00000045 50                              push eax
    60 00000046 E8(00000000)                    call nr_cif ;rezultat in ecx
    61                                          
    62 0000004B 890D[B8000000]                  mov [numar_cifre], ecx
    63 00000051 58                              pop eax
    64                                          
    65                                          
    66 00000052 A901000000                      test eax, 1
    67 00000057 50                              push eax
    68 00000058 741E                            jz par
    69                                              ;aici e impar
    70 0000005A BF[AE000000]                        mov edi, N ; sirul de numere impare
    71 0000005F B800000000                          mov eax, 0
    72 00000064 A1[AA000000]                        mov eax, [numar]
    73 00000069 8B15[AE000000]                      mov edx, [i]
    74 0000006F 42                                  inc edx
    75 00000070 8915[AE000000]                      mov [i], edx
    76 00000076 EB22                                jmp nu_e_par
    77                                          par:
    78                                              ;aici e par
    79 00000078 BF[AE000000]                        mov edi, P
    80 0000007D B800000000                          mov eax, 0
    81 00000082 A1[AA000000]                        mov eax, [numar]
    82 00000087 8B15[B2000000]                      mov edx, [j]
    83 0000008D 8982[AE000000]                      mov [N + edx], eax
    84 00000093 42                                  inc edx
    85 00000094 8915[B2000000]                      mov [j], edx
    86                                          nu_e_par:
    87 0000009A 58                              pop eax
    88 0000009B 83F801                          cmp eax, 1
    89 0000009E 7581                         jnz citeste
    90                                      sari:
    91 000000A0 68[AE000000]                push dword N
    92 000000A5 68[6D000000]                push dword format_output_imp
    93 000000AA FF15[00000000]              call [printf]
    94 000000B0 83C408                      add esp, 4 * 2
    95                                      
    96 000000B3 68[B6000000]                push dword endline
    97 000000B8 68[A2000000]                push dword format_output
    98 000000BD FF15[00000000]              call [printf]
    99 000000C3 83C408                      add esp, 4 * 2
   100                                      
   101 000000C6 68[AE000000]                push dword P
   102 000000CB 68[89000000]                push dword format_output_pare
   103 000000D0 FF15[00000000]              call [printf]
   104 000000D6 83C408                      add esp,4 * 2
   105                                        
   106                                      final: ; close the file
   107 000000D9 FF35[64000000]              push dword [descriptor]
   108                                      
   109 000000DF FF15[00000000]              call [fclose]
   110 000000E5 83C404                      add esp, 4
   111                                  
   112 000000E8 6A00                        push 0
   113 000000EA FF15[00000000]              call [exit]
